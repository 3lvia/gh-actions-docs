name: Build, release and test

on:
  push:
    branches: [trunk]
    paths-ignore: ['README.md']
  pull_request:
    branches: [trunk]
    paths-ignore: ['README.md']

concurrency:
  group: '${{ github.workflow }}-${{ github.ref }}'

jobs:
  build-release:
    name: Build and release
    runs-on: elvia-runner
    permissions:
      actions: read
      contents: write
      packages: write
      pull-requests: write
      security-events: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Resolve version from Cabal file
        run: |
          version=$(cat gh-actions-docs.cabal | grep '^version:' | sed -e 's/version:\s*//g')
          echo "VERSION_TAG=v$version" >> "$GITHUB_ENV"
          echo "MAJOR_VERSION_TAG=v$(echo $version | cut -d. -f1)" >> "$GITHUB_ENV"

      - name: Build
        uses: 3lvia/core-github-actions-templates/build@trunk
        with:
          name: 'gh-actions-docs'
          namespace: 'core'
          project-file: 'Dockerfile'
          trivy-post-comment: 'true'
          trivy-upload-report: 'true'
          severity: 'CRITICAL,HIGH,MEDIUM,LOW,UNKNOWN'
          checkout: 'false'
          registry: 'ghcr.io/3lvia'
          docker-additional-tags: ${{ github.event_name == 'push' && format('latest,{0}', env.VERSION_TAG) || env.VERSION_TAG }}

      - name: Create release if new version
        if: ${{ github.event_name == 'push' }}
        run: |
          latest_version=$(gh release list --json name,isLatest -q '.[] | select(.isLatest == true) | .name')
          if [[ "$latest_version" == '${{ env.VERSION_TAG }}' ]]; then
            echo "Version already released."
            exit 0
          fi

          gh release create \
            '${{ env.VERSION_TAG }}' \
            --generate-notes
        env:
          GH_TOKEN: ${{ github.token }}

      - name: Override major tag
        if: ${{ github.event_name == 'push' }}
        run: |
          git config user.name github-actions
          git config user.email github-actions@github.com

          git fetch --tags
          git tag '${{ env.MAJOR_VERSION_TAG }}' '${{ env.VERSION_TAG }}' -f
          git push --tags -f

  test:
    name: Test
    runs-on: elvia-runner
    needs: [build-release]
    permissions:
      contents: write
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Run action
      uses: ./
      with:
        ignore-files: 'your/cool/action.yml'
        run-prettier: 'true'
        no-name: 'true'
        no-description: 'true'
        no-toc: 'true'

    - name: Output README for debugging
      if: ${{ github.event_name == 'pull_request' }} # Only output README on PR
      run: cat README.md

    - name: Commit changes
      if: ${{ github.event_name == 'push' }} # Only commit changes to README on push
      run: |
        if [[ -z "$(git status --porcelain)" ]]; then
          echo "No changes to commit"
          exit 0
        fi

        git config user.name github-actions
        git config user.email github-actions@github.com

        git add README.md
        git commit -m "Update action documentation"
        git push
